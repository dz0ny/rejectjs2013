!!! 5
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Welcome our new ES5 Overlords

    link(rel='stylesheet', type='text/css', href='http://fonts.googleapis.com/css?family=Seaweed+Script')

    //- Check out 'src/bower_components/prism/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/prism-funky.css')

    link(rel='stylesheet', type='text/css', href='styles/main.css')

  body

    article

      section

      section
        h1 Welcome our <br/><strong>new ES5 Overlords</strong>

      section
        h2 Hello

      section
        h2 A good time to talk about ES5
        ul
          li
          li Every current browseer supports ES5
          li Previous browser supports ES5
          li In a few weeks every browser before that will support ES5
          li Node is ES5
          li IE8 may not be a requirement in your next project

      section
        h2 <strong>ES5</strong>
        ul
          li Some new methods
          li Which are convenient
          li That we ignore

      section
        h1 There is <strong>magic</strong> in ES5

      section
        h2 Some JS
        p A list of German bands
        p Clicking the button should show the band name
        hr
        code.language-javascript
          pre.
            var bands = ['Apparat', 'Boy', 'Kraftklub'];
            for (var i = 0; i < bands.length; i++) {
              var band = bands[i],
                button = document.createElement('button');

              button.appendChild(document.createTextNode(band));

              button.addEventListener('click', function(){
                alert(band);
              });

              document.body.appendChild(button);
            }


      section
        h2 This code has two problems
        ul
          li
          li Valeska from 'Boy' is actually Swiss
          li When the loop is finished, 'band' has the last value, and that's what the inner function 'sees'.

      section
        h2 This means we can only see KraftKlub
        ul
          li
          li We don't want to that
          li Felix is a poser

      section
        h2 Some basic JS (fixed)
        hr
        code.language-javascript
          pre.
            var bands = ['Apparat', 'Boy', 'Kraftklub'];
            for (var i = 0; i < bands.length; i++) {
              var band = bands[i],
                button = document.createElement('button');
              button.appendChild(document.createTextNode(band));
              (function(band){
                button.addEventListener('click', function(){
                  alert(band);
                });
              })(band);
              document.body.appendChild(button);
            }

      section
        h2 Same thing in ES5
        code.language-javascript
          pre.
            ['Apparat', 'Boy', 'Kraftklub'].forEach(function(band){
              var button = document.createElement('button');
              button.appendChild(document.createTextNode(band));
              button.addEventListener('click', function(){
                alert(band);
              });
              document.body.appendChild(button);
            })

      section
        ul
          li 1/3rd less code
          li Looks nice
          li Functions are more 'natural' fit for JS than older 'for' loops

      section
        h2 Let's do it for more things!

      section
        h1 <strong>Safe</strong> Extension of Inbuilt Methods

      section
        h2 No, <strong>really</strong>

      section
        h2 Quick History* Lesson
        sub *History may be more recent than expected

      section
        h2 ES3: Non-native methods appear during iteration
        code.language-javascript
          pre.
            Object.prototype.oldStyleMethod = function oldStyleMethod (){};
            var someObject = {};
            for (var key in someObject) { console.log(key) };

      section
        h2 ES3: But native methods don't
        p This is why toString() doesn't appear in 'for' loops.
        code.language-javascript
          pre.
            console.log(Object.prototype.toString);
            function toString() { [native code] };

      section
        h2 Added methods are <strong>always</strong> enumerable in ES3
        ul
          li So they <strong>always appear</strong> in 'for' loops
          li Extending prototypes in ES3 can work if the <strong>entire universe changes</strong> their 'for' loops
          li Surprisingly this not happen
          li So extending prototypes in ES3 is risky

      section
        h2 ES5: <strong>Non enumerable methods</strong> can be added
        p Requires native ES5 (not shimmable)
        code.language-javascript
          pre.
            Object.defineProperty( Object.prototype, "newStyleMethod", {
              value: function newStyleMethod(){},
              enumerable: false
            });
            for (var key in someObject) { console.log(key) };

      section
        h2 That's not the only problem

      section
        h2 Generic names
        p Past conflicts:
        ul
          li String.prototype.namespace()
          li Array.prototype.find()

      section
        h2 Prefixing
        p Set a sensible prefix

      section
        table
          tr
            td
            td Underscore
            td Sugar
          tr
            td Methods
            td No
            td Yes
          tr
            td Regular 'for' loops
            td Yes
            td No
          tr
            td Conflict-free
            td Yes
            td No

      section
        table
          tr
            td
            td Underscore
            td <strong>Agave (ES5 only)</strong>
            td Sugar
          tr
            td Methods
            td No
            td Yes
            td Yes
          tr
            td Regular 'for' loops
            td Yes
            td Yes
            td No
          tr
            td Conflict-free
            td Yes
            td Yes
            td No

      section
        h2 Using ES5 defineProperty() and prefixing, Agave.JS has had <strong>no</strong> conflicts since it was created (early 2012).

      section
        h2 Other reasons:
        ul
          li
            h3 <i>"You can do that. You should do that."</i>
            author <a href="http://vimeo.com/66711027">Brendan Eich, JQuery UK, 19 Apr 2013</a>
          li
            h3 Ember does it.
            author <a href="http://emberjs.com/guides/configuring-ember/disabling-prototype-extensions/">Ember JS Prototype Extensions</a>
          li
            h3 I just gave you a happy hippo.

      section
        h1 More magic: <strong>Live</strong> Binding

      section
        h2 An experiment in two parts
        ol
          li A <strong>data â†’ DOM binding</strong> (I like mustache, so I use <a href="http://www.ractivejs.org/">Ractive</a>).
          li Data changes applied to binding <strong>live</strong> via <strong>object.defineProperty()</strong>

      section
        h3 Live binding with defineProperty
        code.language-javascript
          pre.
            var livebind = function(object, binding, properties){
              properties.forEach(function(property){
                var hiddenProperty = '_'+property
                Object.defineProperty(object, property, {
                  get: function(){ return testData[hiddenProperty]; },
                  set: function(newValue){
                    testData[hiddenProperty] = newValue;
                    binding.set(property, newValue)
                  },
                  enumerable: true,
                  configurable: true
                });
              })
            }

      section
        h2 Note
        ol
          li Prototype chain injection (from Kangax, uses .__proto__) provides array.length magic
          li This is an experiment

      section
        h1 <strong>ES5-only</strong> is coming
        ul
          li For many, it's already here
          li Use ES5 methods directly
          li Don't be scared to extend native prototypes
          li Experiment

      section
        h1 Thanks.
        h2 <a href="http://twitter.com/mikemaccana">@mikemaccana</a>
        h3 Enjoy the week

    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/main.js')
